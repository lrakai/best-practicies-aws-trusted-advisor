{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Monitor CloudTrail Events",
    "Parameters": {},
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/20"
            },
            "ProdSubnetA": {
                "CIDR": "10.0.1.0/24",
                "AZ": "us-west-2a"
            }
        },
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        },
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        }
    },
    "Resources": {
        "AllVolumesToSnapshot": {
            "Type": "AWS::CloudFormation::CustomResource",
            "DependsOn": "VolumeToSnapshot",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "SnapshotVolume",
                        "Arn"
                    ]
                }
            }
        },
        "SnapshotVolume": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "const response = require('cfn-response');",
                                "const AWS = require('aws-sdk');",
                                "const ec2 = new AWS.EC2();",
                                "const snapshotVolumes = function() {",
                                "   return ec2.describeVolumes().promise()",
                                "   .then(result => {",
                                "      const volumes = result.Volumes || [];",
                                "      return Promise.all(volumes.map(volume => {",
                                "         return ec2.createSnapshot({",
                                "                   VolumeId: volume.VolumeId,",
                                "                   Description: 'Important data'",
                                "               }).promise()",
                                "               .then(snapshot => {",
                                "                   return ec2.modifySnapshotAttribute({",
                                "                       Attribute: 'createVolumePermission',",
                                "                       GroupNames: [",
                                "                           'all'",
                                "                       ],",
                                "                       OperationType: 'add',",
                                "                       SnapshotId: snapshot.SnapshotId",
                                "                   }).promise()",
                                "                       .catch(error => {",
                                "                           console.error('Error modifying snapshot attribute for snapshot ' + snapshot.SnapshotId);",
                                "                       });",
                                "               })",
                                "               .catch(error => {",
                                "                   console.error('Error creating snapshot from ' + volume.VolumeId + '. continue');",
                                "               });",
                                "       }));",
                                "   })",
                                "   .then(() => {",
                                "       console.log('Everything went fine');",
                                "       return true;",
                                "   })",
                                "   .catch(err => {",
                                "       console.error('Something bad happened...');",
                                "       console.error(err);",
                                "       return true;",
                                "   });",
                                "};",
                                "exports.handler = function(event, context) {",
                                "   console.log(JSON.stringify(event));",
                                "   const responseData = {Value: []};",
                                "   if(event.RequestType !== 'Create') {",
                                "       response.send(event, context, response.SUCCESS, responseData);",
                                "       return true;",
                                "   }",
                                "   return snapshotVolumes()",
                                "   .then(result => {",
                                "       response.send(event, context, response.SUCCESS, responseData);",
                                "   });",
                                "};"
                            ]
                        ]
                    }
                },
                "Runtime": "nodejs6.10"
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateSnapshot",
                                        "ec2:DeleteSnapshot",
                                        "ec2:CreateTags",
                                        "ec2:ModifySnapshotAttribute",
                                        "ec2:ResetSnapshotAttribute"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "VolumeToSnapshot": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": "us-west-2a",
                "Size": "1",
                "VolumeType": "gp2"
            }
        },
        "ProdVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Production Vpc"
                    }
                ]
            }
        },
        "ProdIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ProdIGW"
                    }
                ]
            }
        },
        "DevIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DevIGW"
                    }
                ]
            }
        },
        "LimeWireFleetIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "LimeWireFleetIGW"
                    }
                ]
            }
        },
        "WebSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow incoming http traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "ProdVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Prod Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Prod"
                    }
                ]
            }
        },
        "SharePointSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SharePoint traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1433",
                        "ToPort": "1433",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "1434",
                        "ToPort": "1434",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "ProdVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SharePoint Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Prod"
                    }
                ]
            }
        },
        "AnalyticsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow Kibana traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5601",
                        "ToPort": "5601",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "ProdVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Kibana Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Prod"
                    }
                ]
            }
        },
        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "Students",
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "students-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "trustedadvisor:DescribeCheckItems",
                                        "trustedadvisor:DescribeCheckRefreshStatuses",
                                        "trustedadvisor:DescribeCheckSummaries",
                                        "trustedadvisor:DescribeNotificationPreferences",
                                        "trustedadvisor:ExcludeCheckItems",
                                        "trustedadvisor:IncludeCheckItems",
                                        "trustedadvisor:RefreshCheck",
                                        "ec2:RevokeSecurityGroupIngress",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:ModifySnapshotAttribute",
                                        "ec2:ResetSnapshotAttribute",
                                        "ec2:DescribeInternetGateways",
                                        "ec2:DeleteInternetGateway"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "ec2:Describe*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow",
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:Region": "us-west-2"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "iam:ListUsers"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS:AccountId"
                                                },
                                                ":user/"
                                            ]
                                        ]
                                    },
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "iam:ListUserPolicies",
                                        "iam:ListAttachedUserPolicies",
                                        "iam:ListSSHPublicKeys",
                                        "iam:ListAccessKeys",
                                        "iam:ListServiceSpecificCredentials"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS:AccountId"
                                                },
                                                ":user/${aws:username}"
                                            ]
                                        ]
                                    },
                                    "Effect": "Allow"
                                },
                                {
                                    "Sid": "AllowUsersToCreateEnableResyncDeleteTheirOwnVirtualMFADevice",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateVirtualMFADevice",
                                        "iam:EnableMFADevice",
                                        "iam:ResyncMFADevice",
                                        "iam:DeleteVirtualMFADevice"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:iam::",
                                                    {
                                                        "Ref": "AWS:AccountId"
                                                    },
                                                    ":mfa/${aws:username}"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:iam::",
                                                    {
                                                        "Ref": "AWS:AccountId"
                                                    },
                                                    ":user/${aws:username}"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Sid": "AllowUsersToDeactivateTheirOwnVirtualMFADevice",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeactivateMFADevice"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:iam::",
                                                    {
                                                        "Ref": "AWS:AccountId"
                                                    },
                                                    ":mfa/${aws:username}"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:iam::",
                                                    {
                                                        "Ref": "AWS:AccountId"
                                                    },
                                                    ":user/${aws:username}"
                                                ]
                                            ]
                                        }
                                    ],
                                    "Condition": {
                                        "Bool": {
                                            "aws:MultiFactorAuthPresent": true
                                        }
                                    }
                                },
                                {
                                    "Sid": "AllowUsersToListMFADevicesandUsersForConsole",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:ListMFADevices",
                                        "iam:ListVirtualMFADevices",
                                        "iam:ListUsers"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Deny",
                                    "Action": [
                                        "ec2:*Host*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "LoginProfile": {
                    "Password": {
                        "Fn::FindInMap": [
                            "UserConfig",
                            "Login",
                            "Pass"
                        ]
                    }
                },
                "Path": "/",
                "Groups": [
                    "Students"
                ],
                "UserName": {
                    "Fn::FindInMap": [
                        "UserConfig",
                        "Login",
                        "Name"
                    ]
                }
            }
        }
    }
}